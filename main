fun strToBinary(str: String): String {
    var bin = ""
    for (i in str) {
        bin += "%07d".format((Integer.toBinaryString(i.code)).toInt())
    }
    return bin
}

fun binaryToZero(str: String): String {
    var zeros = ""
    var lastN = '-'
    for (i in str) {
        if (i == lastN) {
            zeros += "0"
        }
        else {
            if (zeros.length > 1) zeros += " "
            if (i == '0') {
                zeros += "00 0"
            }
            else {
                zeros += "0 0"
            }
        }
        lastN = i
    }
    return zeros
}

fun zeroToBinary(str: String): String {
    var bin = ""
    val list = str.split(' ')
    if (list.size % 2 != 0) {
        return ""
    }
    for (i in 0..list.size-2 step 2) {
        if (list[i] == "0") {
            bin += list[i+1].replace('0', '1')
        } else if (list[i] == "00") bin += list[i+1]
        else return ""
    }
    if (bin.length % 7 != 0) {
        return ""
    }
    return bin
}

fun splitBy7(str: String): String {
    if (str == "") {
        return ""
    }
    var splStr = ""
    var x = 0
    var y = 7
    while (y <= str.length) {
        splStr += str.substring(x, y) + " "
        x = y
        y += 7
    }
    return splStr
}

fun binaryToLetters(str: String){
    if (str == "") {
        println("Encoded string is not valid.")
        return
    }
    val list = str.split(' ')
    println("Decoded string:")
    for (i in 0 until list.size){
        if (list[i].length < 7) return
        print(Integer.parseInt(list[i], 2).toChar())
    }
}

fun encode() {
    println("Input string:")
    val str = readln()
    println("Encoded string:")
    println(binaryToZero(strToBinary(str)))
}

fun decode() {
    println("Input encoded string:")
    val str = readln()
    binaryToLetters(splitBy7(zeroToBinary(str)))
    println()
}

fun choice() {
    var str = ""
    while (str != "exit") {
        println("Please input operation (encode/decode/exit):")
        str = readln()
        when (str) {
            "encode" -> encode()
            "decode" -> decode()
            else -> println("There is no '$str' operation")
        }
        println()
    }
    println("Bye")
}

fun main() {
    choice()
}
